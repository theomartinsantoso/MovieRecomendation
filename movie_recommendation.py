# -*- coding: utf-8 -*-
"""Movie Recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JmkYVOPCnpRn_0Q-HdWPdTU_iFx3W9Co

Import Library dari Python
"""

import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""Pengumpulan Datasets"""

# Memilih dan menampilkan dataset
#from google.colab import files
#uploaded = files.upload()

# Mengganti nama movies.csv menjadi data_film
data_film = pd.read_csv('movies.csv')

# Mengganti nama movies.csv menjadi data_film
#poster_film = pd.read_csv('poster.csv')

#data_film = pd.merge(list_film, poster_film)

# Menampilkan 5 daftar film teratas dari dataset
data_film.head(5)

# Menampilkan kolom dan baris pada dataset
data_film.shape

data_film.columns

data_film.info()

# Menyeleksi kolom yang relevan untuk rekomendasi
kolom = ['original_title','genres','release_date','cast','director']
print(kolom)

# Menampilkan 3 baris yang dipilih
data_film[kolom].head(3)

# Mengecek baris yang hilang
data_film[kolom].isnull().values.any()

# Membuat fungsi untuk nilai baris yang kosong menjadi string
for fungsi in kolom:
  data_film[fungsi] = data_film[fungsi].fillna('')

# Mengambil semua data 
kombinasi_kolom = data_film['original_title']+' '+data_film['genres']+' '+data_film['cast']+' '+data_film['director']
print(kombinasi_kolom)

# Merubah data teks menjadi vektor
vectorizer = TfidfVectorizer()

# Cek data menjadi vektor 
fungsi_vektor = vectorizer.fit_transform(kombinasi_kolom)
print(fungsi_vektor)

"""K-Nearest Neighbors"""

from sklearn.neighbors import NearestNeighbors
model_knn = NearestNeighbors(metric='consine', algorithm='brute', n_neighbors=20, n_jobs=-1)

# Membuat kesamaan menggunakan cosine similarity
kesamaan_film = cosine_similarity(fungsi_vektor)
print(kesamaan_film)

# Cek data 
print(kesamaan_film.shape)

"""Algoritma Penyelesaian Kesamaan"""

nama_film = 'Insidious'
print(nama_film)

judul_film = data_film['title'].tolist()
print(judul_film)

cari_film = difflib.get_close_matches(nama_film, judul_film)
print(cari_film)

film_terdekat = cari_film[0]
print(film_terdekat)

index_film = data_film[data_film.title == film_terdekat]['index'].values[0]
print(index_film)

nilai_kesamaan = list(enumerate(kesamaan_film[index_film]))
print(nilai_kesamaan)

filter_nilai_kesamaan = sorted(nilai_kesamaan, key = lambda x:x[1], reverse = True)
print(filter_nilai_kesamaan)

print('\n--------------------------------------------------------\n')
i = 1
print('7 Film yang direkomendasi: \n')
for film in filter_nilai_kesamaan:
  index = film[0]
  judul_film = data_film[data_film.index==index]['title'].values[0]
  rilis_film = data_film[data_film.index==index]['release_date'].values[0]
  if (i<8):
    print(i, '.',judul_film, ' | ',rilis_film)
    i+=1

"""Menanyakan Film kepada User"""

nama_film = input('Masukan Film Favorite Anda : ')

judul_film = data_film['title'].tolist()

cari_film = difflib.get_close_matches(nama_film, judul_film)

film_terdekat = cari_film[0]

index_film = data_film[data_film.title == film_terdekat]['index'].values[0]

nilai_kesamaan = list(enumerate(kesamaan_film[index_film]))

filter_nilai_kesamaan = sorted(nilai_kesamaan, key = lambda x:x[1], reverse = True) 

print('\n--------------------------------------------------------\n')
i = 1
print('7 Film yang direkomendasi: \n')
for film in filter_nilai_kesamaan:
  index = film[0]
  judul_film = data_film[data_film.index==index]['title'].values[0]
  rilis_film = data_film[data_film.index==index]['release_date'].values[0]
  if (i<8):
    print(i, '.',judul_film, ' | ',rilis_film)
    i+=1